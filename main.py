# ƒê√¢y l√† phi√™n b·∫£n Kivy ƒë∆∞·ª£c vi·∫øt l·∫°i t·ª´ m√£ Tkinter c·ªßa b·∫°n ƒë·ªÉ c√≥ th·ªÉ build APK tr√™n Android
# L∆∞u √Ω: C·∫ßn ch·ªânh s·ª≠a th√™m UI/UX n·∫øu mu·ªën ho√†n ch·ªânh

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from datetime import datetime
from gtts import gTTS
import pandas as pd
import os
import threading
from kivy.core.audio import SoundLoader

RESULT_FILE = "ketqua.xlsx"

class CarBox(BoxLayout):
    def __init__(self, car_name, **kwargs):
        super().__init__(orientation='vertical', padding=10, spacing=5, **kwargs)
        self.car_name = car_name
        self.score = 100

        self.name_input = TextInput(hint_text="T√™n th√≠ sinh")
        self.result_label = Label(text="ƒêi·ªÉm: 100", bold=True)

        self.add_widget(Label(text=f"Xe {car_name}", bold=True))
        self.add_widget(self.name_input)

        self.add_widget(self._create_button("üö¶ B·∫Øt ƒë·∫ßu thi", self.bat_dau))
        self.add_widget(self._create_button("‚ùå Ch·∫°m v·∫°ch (-5ƒë)", self.cham_vach))
        self.add_widget(self._create_button("ü¶∂ Ch·ªëng ch√¢n (-5ƒë)", self.chong_chan))
        self.add_widget(self._create_button("‚ö† Sai quy tr√¨nh (R·ªõt)", self.sai_quy_trinh))
        self.add_widget(self._create_button("‚úÖ Ho√†n th√†nh b√†i thi", self.hoan_thanh))
        self.add_widget(self._create_button("üìä K·∫øt qu·∫£", self.ket_qua))
        self.add_widget(self._create_button("üîÅ Reset", self.reset))

        self.add_widget(self.result_label)

    def _create_button(self, text, func):
        btn = Button(text=text, size_hint_y=None, height=40)
        btn.bind(on_release=lambda x: func())
        return btn

    def speak(self, text):
        def play():
            try:
                tts = gTTS(text=text, lang='vi')
                filename = f"temp_{threading.get_ident()}.mp3"
                tts.save(filename)
                sound = SoundLoader.load(filename)
                if sound:
                    sound.play()
                    threading.Timer(5, lambda: os.remove(filename) if os.path.exists(filename) else None).start()
            except Exception as e:
                self.show_popup("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc: {e}")

        threading.Thread(target=play, daemon=True).start()

    def bat_dau(self):
        self.speak(f"Xe {self.car_name} b·∫Øt ƒë·∫ßu thi")

    def cham_vach(self):
        if self.score > 0:
            self.score -= 5
            self.update_score()
            self.speak(f"Xe {self.car_name}, ch·∫°m v·∫°ch, tr·ª´ 5 ƒëi·ªÉm")

    def chong_chan(self):
        if self.score > 0:
            self.score -= 5
            self.update_score()
            self.speak(f"Xe {self.car_name}, ch·ªëng ch√¢n, tr·ª´ 5 ƒëi·ªÉm")

    def sai_quy_trinh(self):
        self.score = 0
        self.update_score()
        self.speak(f"Xe {self.car_name}, b·∫°n ƒë√£ ƒëi sai quy tr√¨nh, r·ªõt")

    def hoan_thanh(self):
        self.speak(f"Xe {self.car_name}, ho√†n th√†nh b√†i thi")

    def ket_qua(self):
        ketqua = "ƒê·∫≠u" if self.score >= 80 else "R·ªõt"
        text = f"ƒêi·ªÉm: {self.score} - {ketqua}"
        self.result_label.text = text
        self.speak(f"Xe {self.car_name}, {self.score} ƒëi·ªÉm, {ketqua}")
        self.save_result()

    def reset(self):
        self.score = 100
        self.update_score()

    def update_score(self):
        ketqua = "ƒê·∫≠u" if self.score >= 80 else "R·ªõt"
        self.result_label.text = f"ƒêi·ªÉm: {self.score}"

    def save_result(self):
        name = self.name_input.text.strip() or "Th√≠ sinh"
        time_now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        ketqua = "ƒê·∫≠u" if self.score >= 80 else "R·ªõt"

        try:
            old_df = pd.read_excel(RESULT_FILE)
        except:
            old_df = pd.DataFrame(columns=["T√™n th√≠ sinh", "ƒêi·ªÉm", "K·∫øt qu·∫£", "Th·ªùi gian"])

        new_row = pd.DataFrame([{
            "T√™n th√≠ sinh": name,
            "ƒêi·ªÉm": self.score,
            "K·∫øt qu·∫£": ketqua,
            "Th·ªùi gian": time_now
        }])

        new_df = pd.concat([old_df, new_row], ignore_index=True)
        new_df.to_excel(RESULT_FILE, index=False)

    def show_popup(self, title, message):
        popup = Popup(title=title, content=Label(text=message), size_hint=(None, None), size=(400, 200))
        popup.open()

class MainApp(App):
    def build(self):
        self.init_excel()
        layout = GridLayout(cols=4, spacing=10, padding=10)
        car_list = ["4", "7", "8", "9", "10", "11", "12", "T"]
        for car in car_list:
            layout.add_widget(CarBox(car))
        return layout

    def init_excel(self):
        if not os.path.exists(RESULT_FILE):
            df = pd.DataFrame(columns=["T√™n th√≠ sinh", "ƒêi·ªÉm", "K·∫øt qu·∫£", "Th·ªùi gian"])
            df.to_excel(RESULT_FILE, index=False)

if __name__ == '__main__':
    MainApp().run()
